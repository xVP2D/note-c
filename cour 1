# **Introduction √† l'Architecture Mat√©rielle et au Langage C**  

## **1. Structure d'un Ordinateur**  
Un ordinateur est compos√© de plusieurs √©l√©ments essentiels :  
- **CPU** (Unit√© Centrale de Traitement)  
  - Registres  
  - ALU (Unit√© Arithm√©tique et Logique)  
  - Instructions  
- **M√©moire RAM** (Stockage temporaire des donn√©es et instructions)  
  - **Stack** : G√®re l‚Äôex√©cution des fonctions  
  - **Heap** : Stocke des donn√©es dynamiques  

## **2. Repr√©sentation des Donn√©es**  
- **Octets et ASCII** :  
  - 1 octet = 8 bits  
  - Exemple de caract√®res : ‚ÄòA‚Äô (0x41 en hexa), ‚Äòa‚Äô (0x61 en hexa)  
  - ASCII vs UTF-8 : UTF-8 est compatible ASCII pour les 128 premiers caract√®res  

- **Syst√®me de Num√©ration** :  
  - Base 2 (binaire) ‚Üí Base 16 (hexad√©cimal) simplifie les conversions  
  - Nombres stock√©s en RAM avec des codages sp√©cifiques (ex: UTF-8, UTF-32)  

## **3. Fonctionnement du Terminal et du Kernel**  
- Affichage, entr√©es clavier, impressions, gestion des processus  
- **Commandes utiles** :  
  - `man ascii` : afficher la table ASCII  
  - `cat /proc/cpuinfo` : voir les extensions CPU  

## **4. Programmation en Langage C**  
- **Manipulation de la RAM** :  
  - Le C manipule uniquement des nombres stock√©s en m√©moire  
  - Gestion de la Stack et de la Heap  

- **Instructions CPU courantes** :  
  - `ADD` : Addition  
  - `POP` : R√©cup√©rer une valeur de la stack  
  - `MOV` : D√©placer une valeur  
  - `SYSCALL` : Appeler une fonction syst√®me  

## **5. Premier Programme : Suite de Fibonacci**  
- D√©monstration en Python puis en C  
- **Principe du programme** :  
  ```c
  int fib(int n) {
      if (n < 2) return 1;
      return fib(n-1) + fib(n-2);
  }
  ```
- Impl√©mentation bas niveau avec registres et appels syst√®me  

## **6. Syscalls et Gestion de la M√©moire**  
- **Instructions sp√©cifiques** :  
  - `sub rsp, 3` : R√©duction du pointeur de la stack  
  - `leave` : Restaurer le pointeur d‚Äôex√©cution  
  - `ret` : Retour d‚Äôune fonction  

- **Ex√©cution du programme** :  
  - Appel de `fib(n)`  
  - Conversion des arguments  
  - Affichage du r√©sultat  

## **7. Conclusion**  
Ce premier cours introduit les bases de l'architecture des ordinateurs et la programmation en C. Il met l‚Äôaccent sur la gestion de la m√©moire, la repr√©sentation des donn√©es et les appels syst√®me pour une meilleure compr√©hension du fonctionnement bas niveau.

---

Si vous voulez une reformulation plus d√©taill√©e ou avec un focus particulier, dites-moi ! üòä
